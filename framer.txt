transition = {
	duration: 0.6,
	ease: [0.6, 0.01, -0.05, 0.9]
}

scope.current, {opacity: [0,1]}, {duration: 0.5, delay: 0.2 * index}
<AnimatePresence > wrapping the page
<div overflow hidden>
<motion.h1
	animate={{y: 0%}}
	initial={{y:"100%"}}
	transition={{delay: 0.5, duration:0.5}}
	exit={{opacity:0, y:20}}


or useAnimate:
import {motion, useAnimate, stagger usePresence} from "framer-motion"

const [isPresent, safeToRemove] = usePresence();
const [scope, animate] = useAnimate();

useEffect(()=>{
if(isPresent){
	const enterAnimation = async () => {
	await animate(scope.current, {opacity[0,1]}, {duration:0.5, delay:0.2 * index}}) 
	//or await animate("h1", {opacity[0,1]}, {duration:0.5, delay: stagger(0.2)}}) 
	enterAnimation();
}
else {
	const exitAnimation = async()=>{
	await animate(scope.current, {opacity:[1,0]}. {duration:0.5,delay:0.2*index}})
	safeToRemove()
)	
	exitAnimation();

})
<div ref={scope}></div>

const menuVars = {
	initial:{
	scaleY: 0
	},
	animate:{
	scaleY:1
	transition: {
		duration: 0.5,
			
	}
	},
	exit:{
	scaleY:0
	transition: {
		duration: 0.5,
		ease: [0.22, 1, 0.36, 0]
	}
	},
}

<motion.div variants={menuVars} initial="initial" animate="animate exit="exit">

//scales from the middle
**whenever exit is being used, wrap it all in <AnimatePresence>

//add transform-origin: top to the style
	